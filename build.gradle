/*
 * This file was generated by the Gradle 'init' task.
 */

plugins {
    id 'java'
    id 'maven-publish'
    id 'eclipse'
    id 'org.springframework.boot' version '2.1.9.RELEASE'
    id 'checkstyle'
    id 'com.diffplug.spotless' version '6.19.0'
}

repositories {
    // mavenLocal()
    maven {
        url = uri('https://repo.maven.apache.org/maven2')
    }
    maven {
        url "https://fynarfin.jfrog.io/artifactory/fyn-libs-release-local"
    }

    maven {
        url = uri('https://fynarfin.jfrog.io/artifactory/fyn-libs-snapshot-local/')
    }
}

apply plugin:'com.diffplug.spotless'
spotless {
    format 'misc', {
        target '**/*.md', '**/*.properties', '**/.gitignore', '**/.openapi-generator-ignore', '**/*.yml', '**/*.xml', '**/**.json', '**/*.sql'
        targetExclude '**/build/**', '**/bin/**', '**/.settings/**', '**/.idea/**', '**/.gradle/**', '**/gradlew.bat', '**/licenses/**', '**/banner.txt', '.vscode/**'
        indentWithSpaces(4)
        endWithNewline()
        trimTrailingWhitespace()
    }

    groovyGradle {
        target '*.gradle', '**/*.gradle'
        targetExclude '**/build/**'
        greclipse()
        indentWithSpaces(4)
        endWithNewline()
        trimTrailingWhitespace()
    }

    lineEndings 'UNIX'
}

dependencies {
    implementation 'com.google.code.gson:gson:2.8.9'
    implementation 'org.json:json:20210307'
    implementation 'org.mifos:ph-ee-connector-common:1.0.0-SNAPSHOT'
    implementation 'org.apache.camel.springboot:camel-spring-boot-starter:3.4.0'
    implementation 'org.apache.camel:camel-undertow:3.4.0'
    implementation 'org.springframework.boot:spring-boot-starter:2.5.2'
    implementation 'org.springframework.boot:spring-boot-starter-web:2.5.2'
    implementation 'org.springframework:spring-web:5.3.19'
    implementation 'org.apache.camel:camel-http:3.4.0'
    implementation 'com.amazonaws:aws-java-sdk:1.11.486'
    implementation 'com.azure:azure-storage-blob:12.12.0'
    implementation 'io.camunda:zeebe-client-java:1.1.0'
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-csv:2.12.0'
    implementation 'org.springframework.kafka:spring-kafka:2.5.8.RELEASE'
    implementation 'org.apache.camel:camel-jackson:3.4.0'
    implementation 'org.apache.camel.springboot:camel-mail-starter:3.4.0'
    compileOnly 'org.projectlombok:lombok:1.18.24'
    annotationProcessor 'org.projectlombok:lombok:1.18.24'
    checkstyle 'com.puppycrawl.tools:checkstyle:10.9.3'
    checkstyle 'com.github.sevntu-checkstyle:sevntu-checks:1.44.1'
    implementation 'com.diffplug.gradle.spotless:spotless:2.4.1'
    implementation 'com.diffplug.spotless:spotless-plugin-gradle:6.17.0'

    testImplementation 'org.apache.camel:camel-test-spring-junit5:3.4.0'
    testImplementation 'io.cucumber:cucumber-junit:7.8.1'
    testImplementation 'io.cucumber:cucumber-spring:7.8.1'
    testImplementation 'io.cucumber:cucumber-java:7.8.1'
    testImplementation 'org.apache.camel:camel-test:3.4.0'
    testImplementation 'org.springframework.boot:spring-boot-starter-test:2.5.4'
    testImplementation "com.google.truth:truth:1.1.3"
    testImplementation 'com.google.code.gson:gson:2.9.0'
}

configure(this) {
    // NOTE: order matters!
    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'eclipse'
    apply plugin: 'checkstyle'
    configurations {
        implementation.setCanBeResolved(true)
        api.setCanBeResolved(true)
    }
    tasks.withType(JavaCompile) {
        options.compilerArgs += [
            "-Xlint:unchecked",
            "-Xlint:cast",
            "-Xlint:auxiliaryclass",
            "-Xlint:deprecation",
            "-Xlint:dep-ann",
            "-Xlint:divzero",
            "-Xlint:empty",
            "-Xlint:exports",
            "-Xlint:fallthrough",
            "-Xlint:finally",
            "-Xlint:module",
            "-Xlint:opens",
            "-Xlint:options",
            "-Xlint:overloads",
            "-Xlint:overrides",
            "-Xlint:path",
            "-Xlint:processing",
            "-Xlint:removal",
            "-Xlint:requires-automatic",
            "-Xlint:requires-transitive-automatic",
            "-Xlint:try",
            "-Xlint:varargs",
            "-Xlint:preview",
            "-Xlint:static",
            // -Werror needs to be disabled because EclipseLink's static weaving doesn't generate warning-free code
            // and during an IntelliJ recompilation, it fails
            //"-Werror",
            "-Xmaxwarns",
            1500,
            "-Xmaxerrs",
            1500
        ]
        options.deprecation = true
    }
    // Configuration for the spotless plugin
    // https://github.com/diffplug/spotless/tree/main/plugin-gradle
    spotless {
        java {
            targetExclude '**/build/**', '**/bin/**', '**/out/**'
            importOrder() //sort imports alphabetically
            removeUnusedImports()
            eclipse().configFile "$rootDir/config/mock-formatter.xml"
            endWithNewline()
            trimTrailingWhitespace()
            // Enforce style modifier order
            custom 'Modifier ordering', {
                def modifierRanking = [
                    public      : 1,
                    protected   : 2,
                    private     : 3,
                    abstract    : 4,
                    default     : 5,
                    static      : 6,
                    final       : 7,
                    transient   : 8,
                    volatile    : 9,
                    synchronized: 10,
                    native      : 11,
                    strictfp    : 12]
                // Find any instance of multiple modifiers. Lead with a non-word character to avoid
                // accidental matching against for instance, "an alternative default value"
                it.replaceAll(/\W(?:public |protected |private |abstract |default |static |final |transient |volatile |synchronized |native |strictfp ){2,}/, {
                    // Do not replace the leading non-word character.  Identify the modifiers
                    it.replaceAll(/(?:public |protected |private |abstract |default |static |final |transient |volatile |synchronized |native |strictfp ){2,}/, {
                        // Sort the modifiers according to the ranking above
                        it.split().sort({ modifierRanking[it] }).join(' ') + ' '
                    }
                    )
                }
                )
            }
        }
        lineEndings 'UNIX'
    }
    // If we are running Gradle within Eclipse to enhance classes,
    // set the classes directory to point to Eclipse's default build directory
    if (project.hasProperty('env') && project.getProperty('env') == 'eclipse') {
        sourceSets.main.java.outputDir = file("$projectDir/bin/main")
    }
    // Configuration for the Checkstyle plugin
    // https://docs.gradle.org/current/userguide/checkstyle_plugin.html
    dependencies {
        checkstyle 'com.puppycrawl.tools:checkstyle:10.3.1'
        checkstyle 'com.github.sevntu-checkstyle:sevntu-checks:1.42.0'
    }
}
group = 'org.mifos'
version = '0.0.1-SNAPSHOT'
description = 'ph-ee-processor-bulk'
sourceCompatibility = '1.8'

publishing {
    publications {
        maven(MavenPublication) {
            from(components.java)
        }
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

tasks.named('test') {
    useJUnitPlatform()
}


configurations {
    cucumberRuntime {
        extendsFrom testImplementation
    }
}

task cucumberCli() {
    dependsOn assemble, testClasses
    doLast {
        javaexec {
            main = "io.cucumber.core.cli.Main"
            classpath = configurations.cucumberRuntime + sourceSets.main.output + sourceSets.test.output
            args = [
                '--plugin',
                'pretty',
                '--plugin',
                'html:target/cucumber-report.html',
                '--glue',
                'org.mifos.processor.cucumber',
                'src/test/java/resources'
            ]
        }
    }
}
